{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"skil-python: High-level Python SKIL client Installation pip install skil Example usage Lightning version: SKIL does everything necessary for you under the hood, i.e. creating a production-grade model server with batteries included. import skil skil_server = skil.Skil() model = skil.Model('your_model.h5') model.deploy(scale=42) Slightly more extended example: from skil import Skil, WorkSpace, Experiment, Model, Deployment # Define and persist your model first model_path = './tf_graph.pb' # connect to your running skil instance skil_server = Skil() # create a workspace and an experiment in it work_space = WorkSpace(skil_server) experiment = Experiment(work_space) # add your model to SKIL model = Model(model_path, experiment) # deploy and serve your model deployment = Deployment(skil_server) model.deploy(deployment, start_server=False) model.serve()","title":"Home"},{"location":"#skil-python-high-level-python-skil-client","text":"","title":"skil-python: High-level Python SKIL client"},{"location":"#installation","text":"pip install skil","title":"Installation"},{"location":"#example-usage","text":"Lightning version: SKIL does everything necessary for you under the hood, i.e. creating a production-grade model server with batteries included. import skil skil_server = skil.Skil() model = skil.Model('your_model.h5') model.deploy(scale=42) Slightly more extended example: from skil import Skil, WorkSpace, Experiment, Model, Deployment # Define and persist your model first model_path = './tf_graph.pb' # connect to your running skil instance skil_server = Skil() # create a workspace and an experiment in it work_space = WorkSpace(skil_server) experiment = Experiment(work_space) # add your model to SKIL model = Model(model_path, experiment) # deploy and serve your model deployment = Deployment(skil_server) model.deploy(deployment, start_server=False) model.serve()","title":"Example usage"},{"location":"deployment/","text":"SKIL Deployments [source] Deployment skil.deployments.Deployment(skil, name=None, id=None) Deployments operate independently of workspaces to ensure that there are no accidental interruptions or mistakes in a production environment. Arguments: skil : Skil server instance. name : string. Name for the deployment. id : Unique id for the deployment. If None , a unique id will be generated.","title":"Deployment"},{"location":"deployment/#skil-deployments","text":"[source]","title":"SKIL Deployments"},{"location":"deployment/#deployment","text":"skil.deployments.Deployment(skil, name=None, id=None) Deployments operate independently of workspaces to ensure that there are no accidental interruptions or mistakes in a production environment. Arguments: skil : Skil server instance. name : string. Name for the deployment. id : Unique id for the deployment. If None , a unique id will be generated.","title":"Deployment"},{"location":"experiment/","text":"SKIL Experiments [source] Experiment skil.experiments.Experiment(work_space=None, id=None, name='test', description='test', verbose=False, create=True) Experiments in SKIL are useful for defining different model configurations, encapsulating training of models, and carrying out different data cleaning tasks. Experiments have a one-to-one relationship with Notebooks and have their own storage mechanism for saving different model configurations when seeking a best candidate. Arguments: work_space : WorkSpace instance. id : integer. Unique id for workspace. If None , a unique id will be generated. name : string. Name for the experiment. description : string. Description for the experiment. verbose : boolean. If True , api response will be printed.","title":"Experiment"},{"location":"experiment/#skil-experiments","text":"[source]","title":"SKIL Experiments"},{"location":"experiment/#experiment","text":"skil.experiments.Experiment(work_space=None, id=None, name='test', description='test', verbose=False, create=True) Experiments in SKIL are useful for defining different model configurations, encapsulating training of models, and carrying out different data cleaning tasks. Experiments have a one-to-one relationship with Notebooks and have their own storage mechanism for saving different model configurations when seeking a best candidate. Arguments: work_space : WorkSpace instance. id : integer. Unique id for workspace. If None , a unique id will be generated. name : string. Name for the experiment. description : string. Description for the experiment. verbose : boolean. If True , api response will be printed.","title":"Experiment"},{"location":"model/","text":"SKIL Models [source] Model skil.models.Model(model=None, id=None, name=None, version=None, experiment=None, labels='', verbose=False, create=True) SKIL wrapper for DL4J, Keras and TF models SKIL has a robust model storage, serving, and import system for supporting major deep learning libraries. SKIL can be used for end-to-end training, configuration, and deployment of models or alternatively you can import models into SKIL. Arguments model : string. Model file path. id : integer. Unique id for model. If None , a unique id will be generated. name : string. Name for the model. version : integer. Version of the model. Defaults to 1. experiment : Experiment instance. If None , an Experiment object will be created internally. labels : string. Labels associated with the workspace, useful for searching (comma seperated). verbose : boolean. If True , prints api response. create : boolean. Internal. Do not use.","title":"Model"},{"location":"model/#skil-models","text":"[source]","title":"SKIL Models"},{"location":"model/#model","text":"skil.models.Model(model=None, id=None, name=None, version=None, experiment=None, labels='', verbose=False, create=True) SKIL wrapper for DL4J, Keras and TF models SKIL has a robust model storage, serving, and import system for supporting major deep learning libraries. SKIL can be used for end-to-end training, configuration, and deployment of models or alternatively you can import models into SKIL. Arguments model : string. Model file path. id : integer. Unique id for model. If None , a unique id will be generated. name : string. Name for the model. version : integer. Version of the model. Defaults to 1. experiment : Experiment instance. If None , an Experiment object will be created internally. labels : string. Labels associated with the workspace, useful for searching (comma seperated). verbose : boolean. If True , prints api response. create : boolean. Internal. Do not use.","title":"Model"},{"location":"resources/","text":"SKIL compute and storage resources [source] DataProc skil.resources.compute.DataProc(skil, name, project_id, region, spark_cluster_name) [source] EMR skil.resources.compute.EMR(skil, name, region, credential_uri, cluster_id=None) [source] HDInsight skil.resources.compute.HDInsight(skil, name, subscription_id, resource_group_name, cluster_name) [source] YARN skil.resources.compute.YARN(skil, name, local_spark_home) [source] AzureStorage skil.resources.storage.AzureStorage(skil, name, container_name) [source] GoogleStorage skil.resources.storage.GoogleStorage(skil, name, project_id, bucket_name) [source] HDFS skil.resources.storage.HDFS(skil, name, name_node_host, name_node_port) [source] S3 skil.resources.storage.S3(skil, name, bucket, region)","title":"Resources"},{"location":"resources/#skil-compute-and-storage-resources","text":"[source]","title":"SKIL compute and storage resources"},{"location":"resources/#dataproc","text":"skil.resources.compute.DataProc(skil, name, project_id, region, spark_cluster_name) [source]","title":"DataProc"},{"location":"resources/#emr","text":"skil.resources.compute.EMR(skil, name, region, credential_uri, cluster_id=None) [source]","title":"EMR"},{"location":"resources/#hdinsight","text":"skil.resources.compute.HDInsight(skil, name, subscription_id, resource_group_name, cluster_name) [source]","title":"HDInsight"},{"location":"resources/#yarn","text":"skil.resources.compute.YARN(skil, name, local_spark_home) [source]","title":"YARN"},{"location":"resources/#azurestorage","text":"skil.resources.storage.AzureStorage(skil, name, container_name) [source]","title":"AzureStorage"},{"location":"resources/#googlestorage","text":"skil.resources.storage.GoogleStorage(skil, name, project_id, bucket_name) [source]","title":"GoogleStorage"},{"location":"resources/#hdfs","text":"skil.resources.storage.HDFS(skil, name, name_node_host, name_node_port) [source]","title":"HDFS"},{"location":"resources/#s3","text":"skil.resources.storage.S3(skil, name, bucket, region)","title":"S3"},{"location":"service/","text":"SKIL Services [source] Service skil.services.Service(skil, model_name, deployment, model_deployment) A wrapper around a deployed model for inference.","title":"Service"},{"location":"service/#skil-services","text":"[source]","title":"SKIL Services"},{"location":"service/#service","text":"skil.services.Service(skil, model_name, deployment, model_deployment) A wrapper around a deployed model for inference.","title":"Service"},{"location":"work_space/","text":"SKIL Workspaces [source] WorkSpace skil.workspaces.WorkSpace(skil=None, name=None, labels=None, verbose=False, create=True) Workspaces are a collection of features that enable different tasks such as conducting experiments, training models, and test different dataset transforms. Workspaces are distinct from Deployments by operating as a space for non-production work. Arguments skil : Skil server instance name : string. Name for the workspace. labels : string. Labels associated with the workspace, useful for searching (comma seperated). verbose : boolean. If True, api response will be printed. create : boolean. Internal, do not use.","title":"Work Space"},{"location":"work_space/#skil-workspaces","text":"[source]","title":"SKIL Workspaces"},{"location":"work_space/#workspace","text":"skil.workspaces.WorkSpace(skil=None, name=None, labels=None, verbose=False, create=True) Workspaces are a collection of features that enable different tasks such as conducting experiments, training models, and test different dataset transforms. Workspaces are distinct from Deployments by operating as a space for non-production work. Arguments skil : Skil server instance name : string. Name for the workspace. labels : string. Labels associated with the workspace, useful for searching (comma seperated). verbose : boolean. If True, api response will be printed. create : boolean. Internal, do not use.","title":"WorkSpace"}]}